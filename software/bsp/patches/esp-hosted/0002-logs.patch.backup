diff --git a/esp_hosted_ng/host/esp_cmd.c b/esp_hosted_ng/host/esp_cmd.c
index 0c0ab96..d8e7f44 100644
--- a/esp_hosted_ng/host/esp_cmd.c
+++ b/esp_hosted_ng/host/esp_cmd.c
@@ -205,7 +205,7 @@ static int wait_and_decode_cmd_resp(struct esp_wifi_device *priv,
 		esp_err("Command[%u] timed out\n", cmd_node->cmd_code);
 		ret = -EINVAL;
 	} else {
-		/*esp_dbg("Resp for command [%u]\n", cmd_node->cmd_code);*/
+		esp_info("Resp for command [%u]\n", cmd_node->cmd_code);
 		ret = 0;
 	}
 
@@ -331,7 +331,7 @@ static void esp_cmd_work(struct work_struct *work)
 	spin_lock_bh(&adapter->cmd_lock);
 	if (adapter->cur_cmd) {
 		/* Busy in another command */
-		/*esp_dbg("Busy in another cmd execution\n");*/
+		esp_info("Busy in another cmd execution\n");
 		spin_unlock_bh(&adapter->cmd_lock);
 		return;
 	}
@@ -340,7 +340,7 @@ static void esp_cmd_work(struct work_struct *work)
 
 	if (list_empty(&adapter->cmd_pending_queue)) {
 		/* No command to process */
-		/*esp_dbg("No more command in queue.\n");*/
+		esp_info("No more command in queue.\n");
 		spin_unlock_bh(&adapter->cmd_pending_queue_lock);
 		spin_unlock_bh(&adapter->cmd_lock);
 		return;
@@ -349,17 +349,17 @@ static void esp_cmd_work(struct work_struct *work)
 	cmd_node = list_first_entry(&adapter->cmd_pending_queue,
 				    struct command_node, list);
 	if (!cmd_node) {
-		esp_dbg("cmd node NULL\n");
+		esp_info("cmd node NULL\n");
 		spin_unlock_bh(&adapter->cmd_pending_queue_lock);
 		spin_unlock_bh(&adapter->cmd_lock);
 		return;
 	}
-	/*esp_dbg("Processing Command [0x%X]\n", cmd_node->cmd_code);*/
+	esp_info("Processing Command [0x%X]\n", cmd_node->cmd_code);
 
 	list_del(&cmd_node->list);
 
 	if (!cmd_node->cmd_skb) {
-		esp_dbg("cmd_node->cmd_skb NULL\n");
+		esp_info("cmd_node->cmd_skb NULL\n");
 		spin_unlock_bh(&adapter->cmd_pending_queue_lock);
 		spin_unlock_bh(&adapter->cmd_lock);
 		return;
@@ -387,7 +387,7 @@ static void esp_cmd_work(struct work_struct *work)
 	}
 
 	if (!list_empty(&adapter->cmd_pending_queue)) {
-		/*esp_dbg("Ym2: Pending cmds, queue work again\n");*/
+		esp_info("Ym2: Pending cmds, queue work again\n");
 		spin_unlock_bh(&adapter->cmd_pending_queue_lock);
 		queue_work(adapter->cmd_wq, &adapter->cmd_work);
 		return;
diff --git a/esp_hosted_ng/host/include/utils.h b/esp_hosted_ng/host/include/utils.h
index 02082e6..0ac7b27 100644
--- a/esp_hosted_ng/host/include/utils.h
+++ b/esp_hosted_ng/host/include/utils.h
@@ -17,14 +17,5 @@
 
 #define esp_err pr_err
 #define esp_warn pr_warn
-#ifdef CONFIG_INFO_LOGS
 #define esp_info pr_info
-#else
-#define esp_info(...) do {} while(0)
-#endif
-
-#ifdef CONFIG_DEBUG_LOGS
 #define esp_dbg pr_debug
-#else
-#define esp_dbg(...) do {} while(0)
-#endif
diff --git a/esp_hosted_ng/host/main.c b/esp_hosted_ng/host/main.c
index b30e81a..87d09f0 100644
--- a/esp_hosted_ng/host/main.c
+++ b/esp_hosted_ng/host/main.c
@@ -406,7 +406,7 @@ static void esp_set_rx_mode(struct net_device *ndev)
 #if 0
 	cmd_set_mcast_mac_list(priv, &mcast_list);
 	while (ip_list) {
-		esp_dbg(" IP MC Address: 0x%x\n", ip_list->multiaddr);
+		esp_info(" IP MC Address: 0x%x\n", ip_list->multiaddr);
 		ip_list = ip_list->next;
 	}
 #endif
@@ -965,7 +965,7 @@ static void esp_reset(void)
 			/* HOST's resetpin set to INPUT */
 			gpio_direction_input(resetpin);
 
-			esp_dbg("Triggering ESP reset.\n");
+			esp_info("Triggering ESP reset.\n");
 		}
 	}
 }
@@ -979,6 +979,8 @@ static int __init esp_init(void)
 	/* Reset ESP, Clean start ESP */
 	esp_reset();
 	msleep(200);
+	esp_info("Starting INFO");
+	esp_info("Starting DBG");
 
 	adapter = init_adapter();
 
diff --git a/esp_hosted_ng/host/sdio/esp_sdio.c b/esp_hosted_ng/host/sdio/esp_sdio.c
index ee0cf5a..9d91614 100644
--- a/esp_hosted_ng/host/sdio/esp_sdio.c
+++ b/esp_hosted_ng/host/sdio/esp_sdio.c
@@ -281,7 +281,7 @@ static void esp_remove(struct sdio_func *func)
 		}
 		memset(context, 0, sizeof(struct esp_sdio_context));
 	}
-	esp_dbg("ESP SDIO cleanup completed\n");
+	esp_info("ESP SDIO cleanup completed\n");
 }
 
 static struct esp_if_ops if_ops = {
@@ -745,7 +745,7 @@ static int monitor_process(void *data)
 
 		if (len_reg > context->rx_byte_count) {
 			if (old_len && (context->rx_byte_count == old_len)) {
-				esp_dbg("Monitor thread ----> [%d - %d] [%d - %d] %d\n",
+				esp_info("Monitor thread ----> [%d - %d] [%d - %d] %d\n",
 						len_reg, context->rx_byte_count,
 						rdata, context->tx_buffer_count, intr);
 
@@ -755,7 +755,7 @@ static int monitor_process(void *data)
 					continue;
 
 				if (skb->len)
-					esp_dbg("Flushed %d bytes\n", skb->len);
+					esp_info("Flushed %d bytes\n", skb->len);
 
 				/* drop the packet */
 				dev_kfree_skb(skb);
@@ -828,7 +828,7 @@ static int esp_probe(struct sdio_func *func,
 		esp_err("Failed to create monitor thread\n");
 #endif
 
-	esp_dbg("ESP SDIO probe completed\n");
+	esp_info("ESP SDIO probe completed\n");
 
 	return ret;
 }
